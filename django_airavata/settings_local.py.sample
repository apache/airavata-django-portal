"""
Override default Django settings for a particular instance.

Copy this file to settings_local.py and modify as appropriate. This file will
be imported into settings.py last of all so settings in this file override any
defaults specified in settings.py.
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Uncomment and specify for production deployments
#DEBUG = False
#STATIC_ROOT = "/var/www/path/to/sitename/static/"
#ALLOWED_HOSTS = ['production.hostname']

# Keycloak Configuration
KEYCLOAK_CLIENT_ID = '...'
KEYCLOAK_CLIENT_SECRET = '...'
KEYCLOAK_AUTHORIZE_URL = '...'
KEYCLOAK_TOKEN_URL = '...'
KEYCLOAK_USERINFO_URL = '...'
KEYCLOAK_LOGOUT_URL = '...'
# Optional: specify if using self-signed certificate or certificate from unrecognized CA
#KEYCLOAK_CA_CERTFILE = os.path.join(BASE_DIR, "django_airavata", "resources", "incommon_rsa_server_ca.pem")
KEYCLOAK_VERIFY_SSL = True

# Airavata API Configuration
GATEWAY_ID = 'default'
AIRAVATA_API_HOST = 'localhost'
AIRAVATA_API_PORT = 8930
AIRAVATA_API_SECURE = False
GATEWAY_DATA_STORE_RESOURCE_ID = '...'
GATEWAY_DATA_STORE_DIR = '/tmp'
GATEWAY_DATA_STORE_HOSTNAME = 'localhost'

# Profile Service Configuration
PROFILE_SERVICE_HOST = AIRAVATA_API_HOST
PROFILE_SERVICE_PORT = 8962
PROFILE_SERVICE_SECURE = False

# Sharing API Configuration
SHARING_API_HOST = 'localhost'
SHARING_API_PORT = 7878
SHARING_API_SECURE = False

# Logging configuration
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'verbose': {
#             'format': '[%(asctime)s %(name)s:%(lineno)d %(levelname)s] %(message)s'
#         },
#     },
#     'filters': {
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         },
#     },
#     'handlers': {
#         'console': {
#             'filters': ['require_debug_true'],
#             'class': 'logging.StreamHandler',
#             'formatter': 'verbose',
#             'level': 'DEBUG',
#         },
#         'file': {
#             'class': 'logging.FileHandler',
#             'filename': 'django_airavata.log',
#             'formatter': 'verbose',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console', 'file'],
#             'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
#         },
#         'airavata': {
#             'handlers': ['console', 'file'],
#             'level': 'DEBUG',
#         },
#         'django_airavata': {
#             'handlers': ['console', 'file'],
#             'level': 'DEBUG',
#         },
#     },
# }
